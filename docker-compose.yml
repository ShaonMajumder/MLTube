version: '3.8'

x-environment:
  DOCKER_BUILDKIT: "1"
  
services:
  php:
    build:
      context: .
      dockerfile: docker/app/php/Dockerfile
    image: laravel-app
    container_name: php
    restart: unless-stopped
    tty: true
    environment:
      SERVICE_NAME: app
      SERVICE_TAGS: dev
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      Object_DETECTION_FOLDER: ${Object_DETECTION_FOLDER}
      WORKING_DIR: ${WORKING_DIR}
    working_dir: ${WORKING_DIR}
    volumes:
      - ./.env:/var/www/public_html/.env:rw
      - ./public_html:/var/www/public_html:rw
      - ./.composer:/var/www/.composer
      - ./.npm:/var/www/.npm
      - ./.config:/var/www/.config
      - ./Object-Detection-YoloV4:/var/www/Object-Detection-YoloV4
      - ./docker/app/php/local.ini:/usr/local/etc/php/conf.d/local.ini:rw
      - ./entrypoint.sh:/usr/local/bin/entrypoint.sh:rw
    entrypoint: /usr/local/bin/entrypoint.sh
    depends_on:
      # nginx:
      #   condition: service_healthy
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "php-fpm", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - app-network

  nginx:
    image: nginx:alpine
    container_name: nginx
    restart: unless-stopped
    tty: true
    ports:
      - "80:80"
    volumes:
      - ./public_html:/var/www/public_html
      - ./docker/nginx/nginx.conf:/etc/nginx/conf.d/default.conf
    healthcheck:
      test: ["CMD", "curl -f http://localhost:8000 || exit 1"]
      interval: 10s
      retries: 3
      timeout: 3s
    networks:
      - app-network

  mysql:
    image: mysql:5.7
    container_name: mysql
    restart: unless-stopped
    tty: true
    ports:
      - "3306:3306"
    environment:
      MYSQL_DATABASE: ${DB_DATABASE}
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
      MYSQL_PASSWORD: ${DB_PASSWORD}
      MYSQL_USER: ${DB_USERNAME}
    volumes:
      - dbdata:/var/lib/mysql
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "--host=${DB_HOST}", "--password=${DB_PASSWORD}", "--user=${DB_USERNAME}"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 5s
    networks:
      - app-network
  
  redis:
    image: "redis:latest"
    container_name: redis
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - ./data/redis:/data
    ports:
      - ${REDIS_PORT}:6379
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      retries: 5
      timeout: 3s
    networks:
      - app-network

  elasticsearch:
    # image: docker.elastic.co/elasticsearch/elasticsearch:7.17.9
    image: docker.elastic.co/elasticsearch/elasticsearch:8.10.2
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      # not recommended for production
      - xpack.security.enabled=false
    volumes:
      - esdata:/usr/share/elasticsearch/data:rw
    ports:
      - 9200:9200
      - 9300:9300
    healthcheck:
      test: ["CMD-SHELL", "curl -s http://localhost:9200/_cluster/health | grep -vq '\"status\":\"red\"'"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - app-network

  kibana:
    image: docker.elastic.co/kibana/kibana:7.17.9
    container_name: kibana
    ports:
      - "5601:5601"
    depends_on:
      elasticsearch:
        condition: service_healthy
    networks:
      - app-network

  logstash:
    image: docker.elastic.co/logstash/logstash:7.17.9
    container_name: logstash
    depends_on:
      elasticsearch:
        condition: service_healthy
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  dbdata:
    driver: local
  esdata:
    driver: local